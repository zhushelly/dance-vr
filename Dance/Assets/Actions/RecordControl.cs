//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Actions/RecordControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RecordControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RecordControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RecordControl"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""72468990-df93-4eb7-8436-0a25b6211245"",
            ""actions"": [
                {
                    ""name"": ""StartRecording"",
                    ""type"": ""Button"",
                    ""id"": ""2eb7dd88-d72c-4c06-8b9b-6b13d033c5ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopRecording"",
                    ""type"": ""Button"",
                    ""id"": ""8ba824e9-9238-4e52-a112-06d722f334ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99577037-5372-4927-af6e-c1b33fb68a33"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartRecording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc6c7c0d-1ab1-4e0b-8b29-f6f8fcf8b931"",
                    ""path"": ""<OculusTouchController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopRecording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_StartRecording = m_GamePlay.FindAction("StartRecording", throwIfNotFound: true);
        m_GamePlay_StopRecording = m_GamePlay.FindAction("StopRecording", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_StartRecording;
    private readonly InputAction m_GamePlay_StopRecording;
    public struct GamePlayActions
    {
        private @RecordControl m_Wrapper;
        public GamePlayActions(@RecordControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartRecording => m_Wrapper.m_GamePlay_StartRecording;
        public InputAction @StopRecording => m_Wrapper.m_GamePlay_StopRecording;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @StartRecording.started += instance.OnStartRecording;
            @StartRecording.performed += instance.OnStartRecording;
            @StartRecording.canceled += instance.OnStartRecording;
            @StopRecording.started += instance.OnStopRecording;
            @StopRecording.performed += instance.OnStopRecording;
            @StopRecording.canceled += instance.OnStopRecording;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @StartRecording.started -= instance.OnStartRecording;
            @StartRecording.performed -= instance.OnStartRecording;
            @StartRecording.canceled -= instance.OnStartRecording;
            @StopRecording.started -= instance.OnStopRecording;
            @StopRecording.performed -= instance.OnStopRecording;
            @StopRecording.canceled -= instance.OnStopRecording;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnStartRecording(InputAction.CallbackContext context);
        void OnStopRecording(InputAction.CallbackContext context);
    }
}
